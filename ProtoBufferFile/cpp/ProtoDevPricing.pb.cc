// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoDevPricing.proto

#include "stdafx.h"
#include "ProtoDevPricing.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace Proto {
namespace DevPricing {
constexpr ProtoDevPricingReq::ProtoDevPricingReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dev_type_(0)

  , duration_(0)
  , volatility_(0)
  , riskfree_rate_(0)
  , strike_(0)
  , s0_(0)
  , s1_(0)
  , expected_ret_(0)
  , knockout_ratio_(0)
  , knockout_ratio2_(0)
  , knockin_ratio_(0)
  , knockout_return_(0)
  , start_obsv_date_(0)
  , mc_samples_(0)
  , barrier_(0)
  , is_knockin_(false)
  , barrier_type_(0)

  , year_days_(252){}
struct ProtoDevPricingReqDefaultTypeInternal {
  constexpr ProtoDevPricingReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProtoDevPricingReqDefaultTypeInternal() {}
  union {
    ProtoDevPricingReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProtoDevPricingReqDefaultTypeInternal _ProtoDevPricingReq_default_instance_;
constexpr ProtoDevPricingRsp::ProtoDevPricingRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(0)
  , value_max_(0)
  , value_min_(0)
  , avg_knockout_month_(0)
  , dev_type_(0)
{}
struct ProtoDevPricingRspDefaultTypeInternal {
  constexpr ProtoDevPricingRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProtoDevPricingRspDefaultTypeInternal() {}
  union {
    ProtoDevPricingRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProtoDevPricingRspDefaultTypeInternal _ProtoDevPricingRsp_default_instance_;
}  // namespace DevPricing
}  // namespace Proto
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ProtoDevPricing_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ProtoDevPricing_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ProtoDevPricing_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ProtoDevPricing_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::Proto::DevPricing::ProtoDevPricingReq, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::DevPricing::ProtoDevPricingReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Proto::DevPricing::ProtoDevPricingReq, dev_type_),
  PROTOBUF_FIELD_OFFSET(::Proto::DevPricing::ProtoDevPricingReq, year_days_),
  PROTOBUF_FIELD_OFFSET(::Proto::DevPricing::ProtoDevPricingReq, duration_),
  PROTOBUF_FIELD_OFFSET(::Proto::DevPricing::ProtoDevPricingReq, volatility_),
  PROTOBUF_FIELD_OFFSET(::Proto::DevPricing::ProtoDevPricingReq, riskfree_rate_),
  PROTOBUF_FIELD_OFFSET(::Proto::DevPricing::ProtoDevPricingReq, strike_),
  PROTOBUF_FIELD_OFFSET(::Proto::DevPricing::ProtoDevPricingReq, s0_),
  PROTOBUF_FIELD_OFFSET(::Proto::DevPricing::ProtoDevPricingReq, s1_),
  PROTOBUF_FIELD_OFFSET(::Proto::DevPricing::ProtoDevPricingReq, expected_ret_),
  PROTOBUF_FIELD_OFFSET(::Proto::DevPricing::ProtoDevPricingReq, knockout_ratio_),
  PROTOBUF_FIELD_OFFSET(::Proto::DevPricing::ProtoDevPricingReq, knockout_ratio2_),
  PROTOBUF_FIELD_OFFSET(::Proto::DevPricing::ProtoDevPricingReq, knockin_ratio_),
  PROTOBUF_FIELD_OFFSET(::Proto::DevPricing::ProtoDevPricingReq, knockout_return_),
  PROTOBUF_FIELD_OFFSET(::Proto::DevPricing::ProtoDevPricingReq, start_obsv_date_),
  PROTOBUF_FIELD_OFFSET(::Proto::DevPricing::ProtoDevPricingReq, mc_samples_),
  PROTOBUF_FIELD_OFFSET(::Proto::DevPricing::ProtoDevPricingReq, is_knockin_),
  PROTOBUF_FIELD_OFFSET(::Proto::DevPricing::ProtoDevPricingReq, barrier_),
  PROTOBUF_FIELD_OFFSET(::Proto::DevPricing::ProtoDevPricingReq, barrier_type_),
  0,
  17,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  15,
  14,
  16,
  PROTOBUF_FIELD_OFFSET(::Proto::DevPricing::ProtoDevPricingRsp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::DevPricing::ProtoDevPricingRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Proto::DevPricing::ProtoDevPricingRsp, dev_type_),
  PROTOBUF_FIELD_OFFSET(::Proto::DevPricing::ProtoDevPricingRsp, value_),
  PROTOBUF_FIELD_OFFSET(::Proto::DevPricing::ProtoDevPricingRsp, value_max_),
  PROTOBUF_FIELD_OFFSET(::Proto::DevPricing::ProtoDevPricingRsp, value_min_),
  PROTOBUF_FIELD_OFFSET(::Proto::DevPricing::ProtoDevPricingRsp, avg_knockout_month_),
  4,
  0,
  1,
  2,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 24, -1, sizeof(::Proto::DevPricing::ProtoDevPricingReq)},
  { 42, 53, -1, sizeof(::Proto::DevPricing::ProtoDevPricingRsp)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::DevPricing::_ProtoDevPricingReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::DevPricing::_ProtoDevPricingRsp_default_instance_),
};

const char descriptor_table_protodef_ProtoDevPricing_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025ProtoDevPricing.proto\022\020Proto.DevPricin"
  "g\"\313\003\n\022ProtoDevPricingReq\022/\n\010Dev_Type\030\001 \002"
  "(\0162\035.Proto.DevPricing.EnumDevType\022\026\n\tYea"
  "r_Days\030\002 \002(\005:\003252\022\020\n\010Duration\030\003 \002(\005\022\022\n\nV"
  "olatility\030\004 \002(\001\022\025\n\rRiskFree_Rate\030\005 \002(\001\022\016"
  "\n\006Strike\030\006 \001(\001\022\n\n\002S0\030\007 \001(\001\022\n\n\002S1\030\010 \001(\001\022\024"
  "\n\014Expected_Ret\030\t \001(\001\022\026\n\016KnockOut_Ratio\030\n"
  " \001(\001\022\027\n\017KnockOut_Ratio2\030\013 \001(\001\022\025\n\rKnockIn"
  "_Ratio\030\014 \001(\001\022\027\n\017KnockOut_Return\030\r \001(\001\022\027\n"
  "\017Start_Obsv_Date\030\016 \001(\005\022\022\n\nMC_Samples\030\017 \001"
  "(\005\022\031\n\nIS_KnockIn\030\020 \001(\010:\005false\022\017\n\007Barrier"
  "\030\021 \001(\001\0227\n\014Barrier_Type\030\022 \001(\0162!.Proto.Dev"
  "Pricing.EnumBarrierType\"\226\001\n\022ProtoDevPric"
  "ingRsp\022/\n\010Dev_Type\030\001 \002(\0162\035.Proto.DevPric"
  "ing.EnumDevType\022\r\n\005Value\030\002 \002(\001\022\021\n\tValue_"
  "Max\030\003 \001(\001\022\021\n\tValue_Min\030\004 \001(\001\022\032\n\022Avg_Knoc"
  "kout_Month\030\005 \001(\001*R\n\013EnumDevType\022\013\n\007Vanil"
  "la\020\000\022\014\n\010Sharkfin\020\001\022\r\n\tSharkfin2\020\002\022\013\n\007Bar"
  "rier\020\003\022\014\n\010SnowBall\020\n*Y\n\017EnumBarrierType\022"
  "\007\n\003CUO\020\000\022\007\n\003CUI\020\001\022\007\n\003CDO\020\002\022\007\n\003CDI\020\003\022\007\n\003P"
  "UO\020\004\022\007\n\003PUI\020\005\022\007\n\003PDO\020\006\022\007\n\003PDI\020\007B#\n\017com.c"
  "c.protobufB\020ProtoDevPricings"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ProtoDevPricing_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ProtoDevPricing_2eproto = {
  false, false, 868, descriptor_table_protodef_ProtoDevPricing_2eproto, "ProtoDevPricing.proto", 
  &descriptor_table_ProtoDevPricing_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_ProtoDevPricing_2eproto::offsets,
  file_level_metadata_ProtoDevPricing_2eproto, file_level_enum_descriptors_ProtoDevPricing_2eproto, file_level_service_descriptors_ProtoDevPricing_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_ProtoDevPricing_2eproto_getter() {
  return &descriptor_table_ProtoDevPricing_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_ProtoDevPricing_2eproto(&descriptor_table_ProtoDevPricing_2eproto);
namespace Proto {
namespace DevPricing {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EnumDevType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ProtoDevPricing_2eproto);
  return file_level_enum_descriptors_ProtoDevPricing_2eproto[0];
}
bool EnumDevType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EnumBarrierType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ProtoDevPricing_2eproto);
  return file_level_enum_descriptors_ProtoDevPricing_2eproto[1];
}
bool EnumBarrierType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ProtoDevPricingReq::_Internal {
 public:
  using HasBits = decltype(std::declval<ProtoDevPricingReq>()._has_bits_);
  static void set_has_dev_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_year_days(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_volatility(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_riskfree_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_strike(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_s0(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_s1(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_expected_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_knockout_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_knockout_ratio2(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_knockin_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_knockout_return(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_start_obsv_date(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_mc_samples(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_is_knockin(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_barrier(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_barrier_type(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0002000f) ^ 0x0002000f) != 0;
  }
};

ProtoDevPricingReq::ProtoDevPricingReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Proto.DevPricing.ProtoDevPricingReq)
}
ProtoDevPricingReq::ProtoDevPricingReq(const ProtoDevPricingReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&dev_type_, &from.dev_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&year_days_) -
    reinterpret_cast<char*>(&dev_type_)) + sizeof(year_days_));
  // @@protoc_insertion_point(copy_constructor:Proto.DevPricing.ProtoDevPricingReq)
}

void ProtoDevPricingReq::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&dev_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&barrier_type_) -
    reinterpret_cast<char*>(&dev_type_)) + sizeof(barrier_type_));
year_days_ = 252;
}

ProtoDevPricingReq::~ProtoDevPricingReq() {
  // @@protoc_insertion_point(destructor:Proto.DevPricing.ProtoDevPricingReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProtoDevPricingReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ProtoDevPricingReq::ArenaDtor(void* object) {
  ProtoDevPricingReq* _this = reinterpret_cast< ProtoDevPricingReq* >(object);
  (void)_this;
}
void ProtoDevPricingReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProtoDevPricingReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProtoDevPricingReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.DevPricing.ProtoDevPricingReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&dev_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&expected_ret_) -
        reinterpret_cast<char*>(&dev_type_)) + sizeof(expected_ret_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&knockout_ratio_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_knockin_) -
        reinterpret_cast<char*>(&knockout_ratio_)) + sizeof(is_knockin_));
  }
  if (cached_has_bits & 0x00030000u) {
    barrier_type_ = 0;
    year_days_ = 252;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtoDevPricingReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .Proto.DevPricing.EnumDevType Dev_Type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Proto::DevPricing::EnumDevType_IsValid(val))) {
            _internal_set_dev_type(static_cast<::Proto::DevPricing::EnumDevType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required int32 Year_Days = 2 [default = 252];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_year_days(&has_bits);
          year_days_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 Duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required double Volatility = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_volatility(&has_bits);
          volatility_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double RiskFree_Rate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_riskfree_rate(&has_bits);
          riskfree_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double Strike = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_strike(&has_bits);
          strike_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double S0 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_s0(&has_bits);
          s0_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double S1 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_s1(&has_bits);
          s1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double Expected_Ret = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_expected_ret(&has_bits);
          expected_ret_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double KnockOut_Ratio = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_knockout_ratio(&has_bits);
          knockout_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double KnockOut_Ratio2 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_knockout_ratio2(&has_bits);
          knockout_ratio2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double KnockIn_Ratio = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_knockin_ratio(&has_bits);
          knockin_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double KnockOut_Return = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_knockout_return(&has_bits);
          knockout_return_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 Start_Obsv_Date = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_start_obsv_date(&has_bits);
          start_obsv_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 MC_Samples = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_mc_samples(&has_bits);
          mc_samples_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool IS_KnockIn = 16 [default = false];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_is_knockin(&has_bits);
          is_knockin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double Barrier = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          _Internal::set_has_barrier(&has_bits);
          barrier_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .Proto.DevPricing.EnumBarrierType Barrier_Type = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Proto::DevPricing::EnumBarrierType_IsValid(val))) {
            _internal_set_barrier_type(static_cast<::Proto::DevPricing::EnumBarrierType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(18, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtoDevPricingReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.DevPricing.ProtoDevPricingReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Proto.DevPricing.EnumDevType Dev_Type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_dev_type(), target);
  }

  // required int32 Year_Days = 2 [default = 252];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_year_days(), target);
  }

  // required int32 Duration = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_duration(), target);
  }

  // required double Volatility = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_volatility(), target);
  }

  // required double RiskFree_Rate = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_riskfree_rate(), target);
  }

  // optional double Strike = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_strike(), target);
  }

  // optional double S0 = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_s0(), target);
  }

  // optional double S1 = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_s1(), target);
  }

  // optional double Expected_Ret = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_expected_ret(), target);
  }

  // optional double KnockOut_Ratio = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_knockout_ratio(), target);
  }

  // optional double KnockOut_Ratio2 = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_knockout_ratio2(), target);
  }

  // optional double KnockIn_Ratio = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_knockin_ratio(), target);
  }

  // optional double KnockOut_Return = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_knockout_return(), target);
  }

  // optional int32 Start_Obsv_Date = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_start_obsv_date(), target);
  }

  // optional int32 MC_Samples = 15;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_mc_samples(), target);
  }

  // optional bool IS_KnockIn = 16 [default = false];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_is_knockin(), target);
  }

  // optional double Barrier = 17;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_barrier(), target);
  }

  // optional .Proto.DevPricing.EnumBarrierType Barrier_Type = 18;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      18, this->_internal_barrier_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.DevPricing.ProtoDevPricingReq)
  return target;
}

size_t ProtoDevPricingReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Proto.DevPricing.ProtoDevPricingReq)
  size_t total_size = 0;

  if (_internal_has_dev_type()) {
    // required .Proto.DevPricing.EnumDevType Dev_Type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dev_type());
  }

  if (_internal_has_duration()) {
    // required int32 Duration = 3;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_duration());
  }

  if (_internal_has_volatility()) {
    // required double Volatility = 4;
    total_size += 1 + 8;
  }

  if (_internal_has_riskfree_rate()) {
    // required double RiskFree_Rate = 5;
    total_size += 1 + 8;
  }

  if (_internal_has_year_days()) {
    // required int32 Year_Days = 2 [default = 252];
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_year_days());
  }

  return total_size;
}
size_t ProtoDevPricingReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.DevPricing.ProtoDevPricingReq)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0002000f) ^ 0x0002000f) == 0) {  // All required fields are present.
    // required .Proto.DevPricing.EnumDevType Dev_Type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dev_type());

    // required int32 Duration = 3;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_duration());

    // required double Volatility = 4;
    total_size += 1 + 8;

    // required double RiskFree_Rate = 5;
    total_size += 1 + 8;

    // required int32 Year_Days = 2 [default = 252];
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_year_days());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000f0u) {
    // optional double Strike = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double S0 = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double S1 = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double Expected_Ret = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double KnockOut_Ratio = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double KnockOut_Ratio2 = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double KnockIn_Ratio = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double KnockOut_Return = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional int32 Start_Obsv_Date = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_start_obsv_date());
    }

    // optional int32 MC_Samples = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_mc_samples());
    }

    // optional double Barrier = 17;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 8;
    }

    // optional bool IS_KnockIn = 16 [default = false];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  // optional .Proto.DevPricing.EnumBarrierType Barrier_Type = 18;
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_barrier_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProtoDevPricingReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProtoDevPricingReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProtoDevPricingReq::GetClassData() const { return &_class_data_; }

void ProtoDevPricingReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ProtoDevPricingReq *>(to)->MergeFrom(
      static_cast<const ProtoDevPricingReq &>(from));
}


void ProtoDevPricingReq::MergeFrom(const ProtoDevPricingReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.DevPricing.ProtoDevPricingReq)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      dev_type_ = from.dev_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000004u) {
      volatility_ = from.volatility_;
    }
    if (cached_has_bits & 0x00000008u) {
      riskfree_rate_ = from.riskfree_rate_;
    }
    if (cached_has_bits & 0x00000010u) {
      strike_ = from.strike_;
    }
    if (cached_has_bits & 0x00000020u) {
      s0_ = from.s0_;
    }
    if (cached_has_bits & 0x00000040u) {
      s1_ = from.s1_;
    }
    if (cached_has_bits & 0x00000080u) {
      expected_ret_ = from.expected_ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      knockout_ratio_ = from.knockout_ratio_;
    }
    if (cached_has_bits & 0x00000200u) {
      knockout_ratio2_ = from.knockout_ratio2_;
    }
    if (cached_has_bits & 0x00000400u) {
      knockin_ratio_ = from.knockin_ratio_;
    }
    if (cached_has_bits & 0x00000800u) {
      knockout_return_ = from.knockout_return_;
    }
    if (cached_has_bits & 0x00001000u) {
      start_obsv_date_ = from.start_obsv_date_;
    }
    if (cached_has_bits & 0x00002000u) {
      mc_samples_ = from.mc_samples_;
    }
    if (cached_has_bits & 0x00004000u) {
      barrier_ = from.barrier_;
    }
    if (cached_has_bits & 0x00008000u) {
      is_knockin_ = from.is_knockin_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      barrier_type_ = from.barrier_type_;
    }
    if (cached_has_bits & 0x00020000u) {
      year_days_ = from.year_days_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProtoDevPricingReq::CopyFrom(const ProtoDevPricingReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.DevPricing.ProtoDevPricingReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoDevPricingReq::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ProtoDevPricingReq::InternalSwap(ProtoDevPricingReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProtoDevPricingReq, barrier_type_)
      + sizeof(ProtoDevPricingReq::barrier_type_)
      - PROTOBUF_FIELD_OFFSET(ProtoDevPricingReq, dev_type_)>(
          reinterpret_cast<char*>(&dev_type_),
          reinterpret_cast<char*>(&other->dev_type_));
  swap(year_days_, other->year_days_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoDevPricingReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ProtoDevPricing_2eproto_getter, &descriptor_table_ProtoDevPricing_2eproto_once,
      file_level_metadata_ProtoDevPricing_2eproto[0]);
}

// ===================================================================

class ProtoDevPricingRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<ProtoDevPricingRsp>()._has_bits_);
  static void set_has_dev_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value_max(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_value_min(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_avg_knockout_month(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000011) ^ 0x00000011) != 0;
  }
};

ProtoDevPricingRsp::ProtoDevPricingRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Proto.DevPricing.ProtoDevPricingRsp)
}
ProtoDevPricingRsp::ProtoDevPricingRsp(const ProtoDevPricingRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&dev_type_) -
    reinterpret_cast<char*>(&value_)) + sizeof(dev_type_));
  // @@protoc_insertion_point(copy_constructor:Proto.DevPricing.ProtoDevPricingRsp)
}

void ProtoDevPricingRsp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&value_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dev_type_) -
    reinterpret_cast<char*>(&value_)) + sizeof(dev_type_));
}

ProtoDevPricingRsp::~ProtoDevPricingRsp() {
  // @@protoc_insertion_point(destructor:Proto.DevPricing.ProtoDevPricingRsp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProtoDevPricingRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ProtoDevPricingRsp::ArenaDtor(void* object) {
  ProtoDevPricingRsp* _this = reinterpret_cast< ProtoDevPricingRsp* >(object);
  (void)_this;
}
void ProtoDevPricingRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProtoDevPricingRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProtoDevPricingRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.DevPricing.ProtoDevPricingRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dev_type_) -
        reinterpret_cast<char*>(&value_)) + sizeof(dev_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtoDevPricingRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .Proto.DevPricing.EnumDevType Dev_Type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Proto::DevPricing::EnumDevType_IsValid(val))) {
            _internal_set_dev_type(static_cast<::Proto::DevPricing::EnumDevType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required double Value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double Value_Max = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_value_max(&has_bits);
          value_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double Value_Min = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_value_min(&has_bits);
          value_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double Avg_Knockout_Month = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_avg_knockout_month(&has_bits);
          avg_knockout_month_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtoDevPricingRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.DevPricing.ProtoDevPricingRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Proto.DevPricing.EnumDevType Dev_Type = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_dev_type(), target);
  }

  // required double Value = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_value(), target);
  }

  // optional double Value_Max = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_value_max(), target);
  }

  // optional double Value_Min = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_value_min(), target);
  }

  // optional double Avg_Knockout_Month = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_avg_knockout_month(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.DevPricing.ProtoDevPricingRsp)
  return target;
}

size_t ProtoDevPricingRsp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Proto.DevPricing.ProtoDevPricingRsp)
  size_t total_size = 0;

  if (_internal_has_value()) {
    // required double Value = 2;
    total_size += 1 + 8;
  }

  if (_internal_has_dev_type()) {
    // required .Proto.DevPricing.EnumDevType Dev_Type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dev_type());
  }

  return total_size;
}
size_t ProtoDevPricingRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.DevPricing.ProtoDevPricingRsp)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000011) ^ 0x00000011) == 0) {  // All required fields are present.
    // required double Value = 2;
    total_size += 1 + 8;

    // required .Proto.DevPricing.EnumDevType Dev_Type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dev_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional double Value_Max = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double Value_Min = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double Avg_Knockout_Month = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProtoDevPricingRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProtoDevPricingRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProtoDevPricingRsp::GetClassData() const { return &_class_data_; }

void ProtoDevPricingRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ProtoDevPricingRsp *>(to)->MergeFrom(
      static_cast<const ProtoDevPricingRsp &>(from));
}


void ProtoDevPricingRsp::MergeFrom(const ProtoDevPricingRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.DevPricing.ProtoDevPricingRsp)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000002u) {
      value_max_ = from.value_max_;
    }
    if (cached_has_bits & 0x00000004u) {
      value_min_ = from.value_min_;
    }
    if (cached_has_bits & 0x00000008u) {
      avg_knockout_month_ = from.avg_knockout_month_;
    }
    if (cached_has_bits & 0x00000010u) {
      dev_type_ = from.dev_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProtoDevPricingRsp::CopyFrom(const ProtoDevPricingRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.DevPricing.ProtoDevPricingRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoDevPricingRsp::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ProtoDevPricingRsp::InternalSwap(ProtoDevPricingRsp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProtoDevPricingRsp, dev_type_)
      + sizeof(ProtoDevPricingRsp::dev_type_)
      - PROTOBUF_FIELD_OFFSET(ProtoDevPricingRsp, value_)>(
          reinterpret_cast<char*>(&value_),
          reinterpret_cast<char*>(&other->value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoDevPricingRsp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ProtoDevPricing_2eproto_getter, &descriptor_table_ProtoDevPricing_2eproto_once,
      file_level_metadata_ProtoDevPricing_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace DevPricing
}  // namespace Proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Proto::DevPricing::ProtoDevPricingReq* Arena::CreateMaybeMessage< ::Proto::DevPricing::ProtoDevPricingReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::DevPricing::ProtoDevPricingReq >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::DevPricing::ProtoDevPricingRsp* Arena::CreateMaybeMessage< ::Proto::DevPricing::ProtoDevPricingRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::DevPricing::ProtoDevPricingRsp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
