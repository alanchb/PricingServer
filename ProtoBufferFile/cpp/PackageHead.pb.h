// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PackageHead.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_PackageHead_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_PackageHead_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "PackageHeadEnum.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_PackageHead_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_PackageHead_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_PackageHead_2eproto;
namespace Proto {
namespace Package {
class PackageHead;
struct PackageHeadDefaultTypeInternal;
extern PackageHeadDefaultTypeInternal _PackageHead_default_instance_;
}  // namespace Package
}  // namespace Proto
PROTOBUF_NAMESPACE_OPEN
template<> ::Proto::Package::PackageHead* Arena::CreateMaybeMessage<::Proto::Package::PackageHead>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Proto {
namespace Package {

// ===================================================================

class PackageHead final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.Package.PackageHead) */ {
 public:
  inline PackageHead() : PackageHead(nullptr) {}
  ~PackageHead() override;
  explicit constexpr PackageHead(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PackageHead(const PackageHead& from);
  PackageHead(PackageHead&& from) noexcept
    : PackageHead() {
    *this = ::std::move(from);
  }

  inline PackageHead& operator=(const PackageHead& from) {
    CopyFrom(from);
    return *this;
  }
  inline PackageHead& operator=(PackageHead&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PackageHead& default_instance() {
    return *internal_default_instance();
  }
  static inline const PackageHead* internal_default_instance() {
    return reinterpret_cast<const PackageHead*>(
               &_PackageHead_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PackageHead& a, PackageHead& b) {
    a.Swap(&b);
  }
  inline void Swap(PackageHead* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PackageHead* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PackageHead* New() const final {
    return new PackageHead();
  }

  PackageHead* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PackageHead>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PackageHead& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PackageHead& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PackageHead* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.Package.PackageHead";
  }
  protected:
  explicit PackageHead(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDestinationFieldNumber = 3,
    kUserIdFieldNumber = 4,
    kModuleIdFieldNumber = 5,
    kMessageTextFieldNumber = 7,
    kCustomTextFieldNumber = 8,
    kMessageCodeFieldNumber = 6,
    kPackageTypeFieldNumber = 1,
    kFunctionCodeFieldNumber = 2,
  };
  // optional string destination = 3;
  bool has_destination() const;
  private:
  bool _internal_has_destination() const;
  public:
  void clear_destination();
  const std::string& destination() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_destination(ArgT0&& arg0, ArgT... args);
  std::string* mutable_destination();
  PROTOBUF_MUST_USE_RESULT std::string* release_destination();
  void set_allocated_destination(std::string* destination);
  private:
  const std::string& _internal_destination() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_destination(const std::string& value);
  std::string* _internal_mutable_destination();
  public:

  // optional string userId = 4;
  bool has_userid() const;
  private:
  bool _internal_has_userid() const;
  public:
  void clear_userid();
  const std::string& userid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_userid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_userid();
  PROTOBUF_MUST_USE_RESULT std::string* release_userid();
  void set_allocated_userid(std::string* userid);
  private:
  const std::string& _internal_userid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userid(const std::string& value);
  std::string* _internal_mutable_userid();
  public:

  // optional string moduleId = 5;
  bool has_moduleid() const;
  private:
  bool _internal_has_moduleid() const;
  public:
  void clear_moduleid();
  const std::string& moduleid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_moduleid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_moduleid();
  PROTOBUF_MUST_USE_RESULT std::string* release_moduleid();
  void set_allocated_moduleid(std::string* moduleid);
  private:
  const std::string& _internal_moduleid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_moduleid(const std::string& value);
  std::string* _internal_mutable_moduleid();
  public:

  // optional string messageText = 7;
  bool has_messagetext() const;
  private:
  bool _internal_has_messagetext() const;
  public:
  void clear_messagetext();
  const std::string& messagetext() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_messagetext(ArgT0&& arg0, ArgT... args);
  std::string* mutable_messagetext();
  PROTOBUF_MUST_USE_RESULT std::string* release_messagetext();
  void set_allocated_messagetext(std::string* messagetext);
  private:
  const std::string& _internal_messagetext() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_messagetext(const std::string& value);
  std::string* _internal_mutable_messagetext();
  public:

  // optional string customText = 8;
  bool has_customtext() const;
  private:
  bool _internal_has_customtext() const;
  public:
  void clear_customtext();
  const std::string& customtext() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_customtext(ArgT0&& arg0, ArgT... args);
  std::string* mutable_customtext();
  PROTOBUF_MUST_USE_RESULT std::string* release_customtext();
  void set_allocated_customtext(std::string* customtext);
  private:
  const std::string& _internal_customtext() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_customtext(const std::string& value);
  std::string* _internal_mutable_customtext();
  public:

  // optional int32 messageCode = 6;
  bool has_messagecode() const;
  private:
  bool _internal_has_messagecode() const;
  public:
  void clear_messagecode();
  ::PROTOBUF_NAMESPACE_ID::int32 messagecode() const;
  void set_messagecode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_messagecode() const;
  void _internal_set_messagecode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required .Proto.Package.PackageType packageType = 1;
  bool has_packagetype() const;
  private:
  bool _internal_has_packagetype() const;
  public:
  void clear_packagetype();
  ::Proto::Package::PackageType packagetype() const;
  void set_packagetype(::Proto::Package::PackageType value);
  private:
  ::Proto::Package::PackageType _internal_packagetype() const;
  void _internal_set_packagetype(::Proto::Package::PackageType value);
  public:

  // required .Proto.Package.FunctionCode functionCode = 2;
  bool has_functioncode() const;
  private:
  bool _internal_has_functioncode() const;
  public:
  void clear_functioncode();
  ::Proto::Package::FunctionCode functioncode() const;
  void set_functioncode(::Proto::Package::FunctionCode value);
  private:
  ::Proto::Package::FunctionCode _internal_functioncode() const;
  void _internal_set_functioncode(::Proto::Package::FunctionCode value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.Package.PackageHead)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr destination_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr moduleid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr messagetext_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customtext_;
  ::PROTOBUF_NAMESPACE_ID::int32 messagecode_;
  int packagetype_;
  int functioncode_;
  friend struct ::TableStruct_PackageHead_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PackageHead

// required .Proto.Package.PackageType packageType = 1;
inline bool PackageHead::_internal_has_packagetype() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PackageHead::has_packagetype() const {
  return _internal_has_packagetype();
}
inline void PackageHead::clear_packagetype() {
  packagetype_ = 1;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::Proto::Package::PackageType PackageHead::_internal_packagetype() const {
  return static_cast< ::Proto::Package::PackageType >(packagetype_);
}
inline ::Proto::Package::PackageType PackageHead::packagetype() const {
  // @@protoc_insertion_point(field_get:Proto.Package.PackageHead.packageType)
  return _internal_packagetype();
}
inline void PackageHead::_internal_set_packagetype(::Proto::Package::PackageType value) {
  assert(::Proto::Package::PackageType_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  packagetype_ = value;
}
inline void PackageHead::set_packagetype(::Proto::Package::PackageType value) {
  _internal_set_packagetype(value);
  // @@protoc_insertion_point(field_set:Proto.Package.PackageHead.packageType)
}

// required .Proto.Package.FunctionCode functionCode = 2;
inline bool PackageHead::_internal_has_functioncode() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PackageHead::has_functioncode() const {
  return _internal_has_functioncode();
}
inline void PackageHead::clear_functioncode() {
  functioncode_ = 1;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::Proto::Package::FunctionCode PackageHead::_internal_functioncode() const {
  return static_cast< ::Proto::Package::FunctionCode >(functioncode_);
}
inline ::Proto::Package::FunctionCode PackageHead::functioncode() const {
  // @@protoc_insertion_point(field_get:Proto.Package.PackageHead.functionCode)
  return _internal_functioncode();
}
inline void PackageHead::_internal_set_functioncode(::Proto::Package::FunctionCode value) {
  assert(::Proto::Package::FunctionCode_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  functioncode_ = value;
}
inline void PackageHead::set_functioncode(::Proto::Package::FunctionCode value) {
  _internal_set_functioncode(value);
  // @@protoc_insertion_point(field_set:Proto.Package.PackageHead.functionCode)
}

// optional string destination = 3;
inline bool PackageHead::_internal_has_destination() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PackageHead::has_destination() const {
  return _internal_has_destination();
}
inline void PackageHead::clear_destination() {
  destination_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PackageHead::destination() const {
  // @@protoc_insertion_point(field_get:Proto.Package.PackageHead.destination)
  return _internal_destination();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PackageHead::set_destination(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 destination_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Proto.Package.PackageHead.destination)
}
inline std::string* PackageHead::mutable_destination() {
  std::string* _s = _internal_mutable_destination();
  // @@protoc_insertion_point(field_mutable:Proto.Package.PackageHead.destination)
  return _s;
}
inline const std::string& PackageHead::_internal_destination() const {
  return destination_.Get();
}
inline void PackageHead::_internal_set_destination(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  destination_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PackageHead::_internal_mutable_destination() {
  _has_bits_[0] |= 0x00000001u;
  return destination_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PackageHead::release_destination() {
  // @@protoc_insertion_point(field_release:Proto.Package.PackageHead.destination)
  if (!_internal_has_destination()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return destination_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PackageHead::set_allocated_destination(std::string* destination) {
  if (destination != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  destination_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), destination,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Proto.Package.PackageHead.destination)
}

// optional string userId = 4;
inline bool PackageHead::_internal_has_userid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PackageHead::has_userid() const {
  return _internal_has_userid();
}
inline void PackageHead::clear_userid() {
  userid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PackageHead::userid() const {
  // @@protoc_insertion_point(field_get:Proto.Package.PackageHead.userId)
  return _internal_userid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PackageHead::set_userid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Proto.Package.PackageHead.userId)
}
inline std::string* PackageHead::mutable_userid() {
  std::string* _s = _internal_mutable_userid();
  // @@protoc_insertion_point(field_mutable:Proto.Package.PackageHead.userId)
  return _s;
}
inline const std::string& PackageHead::_internal_userid() const {
  return userid_.Get();
}
inline void PackageHead::_internal_set_userid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PackageHead::_internal_mutable_userid() {
  _has_bits_[0] |= 0x00000002u;
  return userid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PackageHead::release_userid() {
  // @@protoc_insertion_point(field_release:Proto.Package.PackageHead.userId)
  if (!_internal_has_userid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return userid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PackageHead::set_allocated_userid(std::string* userid) {
  if (userid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  userid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Proto.Package.PackageHead.userId)
}

// optional string moduleId = 5;
inline bool PackageHead::_internal_has_moduleid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PackageHead::has_moduleid() const {
  return _internal_has_moduleid();
}
inline void PackageHead::clear_moduleid() {
  moduleid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& PackageHead::moduleid() const {
  // @@protoc_insertion_point(field_get:Proto.Package.PackageHead.moduleId)
  return _internal_moduleid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PackageHead::set_moduleid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 moduleid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Proto.Package.PackageHead.moduleId)
}
inline std::string* PackageHead::mutable_moduleid() {
  std::string* _s = _internal_mutable_moduleid();
  // @@protoc_insertion_point(field_mutable:Proto.Package.PackageHead.moduleId)
  return _s;
}
inline const std::string& PackageHead::_internal_moduleid() const {
  return moduleid_.Get();
}
inline void PackageHead::_internal_set_moduleid(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  moduleid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PackageHead::_internal_mutable_moduleid() {
  _has_bits_[0] |= 0x00000004u;
  return moduleid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PackageHead::release_moduleid() {
  // @@protoc_insertion_point(field_release:Proto.Package.PackageHead.moduleId)
  if (!_internal_has_moduleid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return moduleid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PackageHead::set_allocated_moduleid(std::string* moduleid) {
  if (moduleid != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  moduleid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), moduleid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Proto.Package.PackageHead.moduleId)
}

// optional int32 messageCode = 6;
inline bool PackageHead::_internal_has_messagecode() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PackageHead::has_messagecode() const {
  return _internal_has_messagecode();
}
inline void PackageHead::clear_messagecode() {
  messagecode_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PackageHead::_internal_messagecode() const {
  return messagecode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PackageHead::messagecode() const {
  // @@protoc_insertion_point(field_get:Proto.Package.PackageHead.messageCode)
  return _internal_messagecode();
}
inline void PackageHead::_internal_set_messagecode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  messagecode_ = value;
}
inline void PackageHead::set_messagecode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_messagecode(value);
  // @@protoc_insertion_point(field_set:Proto.Package.PackageHead.messageCode)
}

// optional string messageText = 7;
inline bool PackageHead::_internal_has_messagetext() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PackageHead::has_messagetext() const {
  return _internal_has_messagetext();
}
inline void PackageHead::clear_messagetext() {
  messagetext_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& PackageHead::messagetext() const {
  // @@protoc_insertion_point(field_get:Proto.Package.PackageHead.messageText)
  return _internal_messagetext();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PackageHead::set_messagetext(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 messagetext_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Proto.Package.PackageHead.messageText)
}
inline std::string* PackageHead::mutable_messagetext() {
  std::string* _s = _internal_mutable_messagetext();
  // @@protoc_insertion_point(field_mutable:Proto.Package.PackageHead.messageText)
  return _s;
}
inline const std::string& PackageHead::_internal_messagetext() const {
  return messagetext_.Get();
}
inline void PackageHead::_internal_set_messagetext(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  messagetext_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PackageHead::_internal_mutable_messagetext() {
  _has_bits_[0] |= 0x00000008u;
  return messagetext_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PackageHead::release_messagetext() {
  // @@protoc_insertion_point(field_release:Proto.Package.PackageHead.messageText)
  if (!_internal_has_messagetext()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return messagetext_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PackageHead::set_allocated_messagetext(std::string* messagetext) {
  if (messagetext != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  messagetext_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), messagetext,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Proto.Package.PackageHead.messageText)
}

// optional string customText = 8;
inline bool PackageHead::_internal_has_customtext() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PackageHead::has_customtext() const {
  return _internal_has_customtext();
}
inline void PackageHead::clear_customtext() {
  customtext_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& PackageHead::customtext() const {
  // @@protoc_insertion_point(field_get:Proto.Package.PackageHead.customText)
  return _internal_customtext();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PackageHead::set_customtext(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 customtext_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Proto.Package.PackageHead.customText)
}
inline std::string* PackageHead::mutable_customtext() {
  std::string* _s = _internal_mutable_customtext();
  // @@protoc_insertion_point(field_mutable:Proto.Package.PackageHead.customText)
  return _s;
}
inline const std::string& PackageHead::_internal_customtext() const {
  return customtext_.Get();
}
inline void PackageHead::_internal_set_customtext(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  customtext_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PackageHead::_internal_mutable_customtext() {
  _has_bits_[0] |= 0x00000010u;
  return customtext_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PackageHead::release_customtext() {
  // @@protoc_insertion_point(field_release:Proto.Package.PackageHead.customText)
  if (!_internal_has_customtext()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return customtext_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PackageHead::set_allocated_customtext(std::string* customtext) {
  if (customtext != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  customtext_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), customtext,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Proto.Package.PackageHead.customText)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Package
}  // namespace Proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_PackageHead_2eproto
