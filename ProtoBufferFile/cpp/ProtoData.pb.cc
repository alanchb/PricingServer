// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoData.proto

#include "stdafx.h"
#include "ProtoData.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace Proto {
namespace Data {
constexpr DataRow::DataRow(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rows_(){}
struct DataRowDefaultTypeInternal {
  constexpr DataRowDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DataRowDefaultTypeInternal() {}
  union {
    DataRow _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DataRowDefaultTypeInternal _DataRow_default_instance_;
constexpr DataMatrix::DataMatrix(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : matrix_(){}
struct DataMatrixDefaultTypeInternal {
  constexpr DataMatrixDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DataMatrixDefaultTypeInternal() {}
  union {
    DataMatrix _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DataMatrixDefaultTypeInternal _DataMatrix_default_instance_;
}  // namespace Data
}  // namespace Proto
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ProtoData_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ProtoData_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ProtoData_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ProtoData_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::Data::DataRow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Proto::Data::DataRow, rows_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::Data::DataMatrix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Proto::Data::DataMatrix, matrix_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Proto::Data::DataRow)},
  { 7, -1, -1, sizeof(::Proto::Data::DataMatrix)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::Data::_DataRow_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::Data::_DataMatrix_default_instance_),
};

const char descriptor_table_protodef_ProtoData_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017ProtoData.proto\022\nProto.Data\"\027\n\007DataRow"
  "\022\014\n\004Rows\030\001 \003(\001\"1\n\nDataMatrix\022#\n\006Matrix\030\001"
  " \003(\0132\023.Proto.Data.DataRow"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ProtoData_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ProtoData_2eproto = {
  false, false, 105, descriptor_table_protodef_ProtoData_2eproto, "ProtoData.proto", 
  &descriptor_table_ProtoData_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_ProtoData_2eproto::offsets,
  file_level_metadata_ProtoData_2eproto, file_level_enum_descriptors_ProtoData_2eproto, file_level_service_descriptors_ProtoData_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_ProtoData_2eproto_getter() {
  return &descriptor_table_ProtoData_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_ProtoData_2eproto(&descriptor_table_ProtoData_2eproto);
namespace Proto {
namespace Data {

// ===================================================================

class DataRow::_Internal {
 public:
};

DataRow::DataRow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  rows_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Proto.Data.DataRow)
}
DataRow::DataRow(const DataRow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rows_(from.rows_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Proto.Data.DataRow)
}

void DataRow::SharedCtor() {
}

DataRow::~DataRow() {
  // @@protoc_insertion_point(destructor:Proto.Data.DataRow)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DataRow::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DataRow::ArenaDtor(void* object) {
  DataRow* _this = reinterpret_cast< DataRow* >(object);
  (void)_this;
}
void DataRow::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataRow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DataRow::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.Data.DataRow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rows_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataRow::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated double Rows = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_rows(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<9>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_rows(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataRow::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.Data.DataRow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double Rows = 1;
  for (int i = 0, n = this->_internal_rows_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_rows(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.Data.DataRow)
  return target;
}

size_t DataRow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.Data.DataRow)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double Rows = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_rows_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_rows_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataRow::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DataRow::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataRow::GetClassData() const { return &_class_data_; }

void DataRow::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DataRow *>(to)->MergeFrom(
      static_cast<const DataRow &>(from));
}


void DataRow::MergeFrom(const DataRow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.Data.DataRow)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rows_.MergeFrom(from.rows_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataRow::CopyFrom(const DataRow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.Data.DataRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataRow::IsInitialized() const {
  return true;
}

void DataRow::InternalSwap(DataRow* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  rows_.InternalSwap(&other->rows_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataRow::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ProtoData_2eproto_getter, &descriptor_table_ProtoData_2eproto_once,
      file_level_metadata_ProtoData_2eproto[0]);
}

// ===================================================================

class DataMatrix::_Internal {
 public:
};

DataMatrix::DataMatrix(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  matrix_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Proto.Data.DataMatrix)
}
DataMatrix::DataMatrix(const DataMatrix& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      matrix_(from.matrix_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Proto.Data.DataMatrix)
}

void DataMatrix::SharedCtor() {
}

DataMatrix::~DataMatrix() {
  // @@protoc_insertion_point(destructor:Proto.Data.DataMatrix)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DataMatrix::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DataMatrix::ArenaDtor(void* object) {
  DataMatrix* _this = reinterpret_cast< DataMatrix* >(object);
  (void)_this;
}
void DataMatrix::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataMatrix::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DataMatrix::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.Data.DataMatrix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matrix_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataMatrix::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Proto.Data.DataRow Matrix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_matrix(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataMatrix::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.Data.DataMatrix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Proto.Data.DataRow Matrix = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_matrix_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_matrix(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.Data.DataMatrix)
  return target;
}

size_t DataMatrix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.Data.DataMatrix)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.Data.DataRow Matrix = 1;
  total_size += 1UL * this->_internal_matrix_size();
  for (const auto& msg : this->matrix_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataMatrix::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DataMatrix::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataMatrix::GetClassData() const { return &_class_data_; }

void DataMatrix::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DataMatrix *>(to)->MergeFrom(
      static_cast<const DataMatrix &>(from));
}


void DataMatrix::MergeFrom(const DataMatrix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.Data.DataMatrix)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  matrix_.MergeFrom(from.matrix_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataMatrix::CopyFrom(const DataMatrix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.Data.DataMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataMatrix::IsInitialized() const {
  return true;
}

void DataMatrix::InternalSwap(DataMatrix* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  matrix_.InternalSwap(&other->matrix_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataMatrix::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ProtoData_2eproto_getter, &descriptor_table_ProtoData_2eproto_once,
      file_level_metadata_ProtoData_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Data
}  // namespace Proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Proto::Data::DataRow* Arena::CreateMaybeMessage< ::Proto::Data::DataRow >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::Data::DataRow >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::Data::DataMatrix* Arena::CreateMaybeMessage< ::Proto::Data::DataMatrix >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::Data::DataMatrix >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
