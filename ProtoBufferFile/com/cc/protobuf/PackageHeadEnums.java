// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PackageHeadEnum.proto

package com.cc.protobuf;

public final class PackageHeadEnums {
  private PackageHeadEnums() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * Protobuf enum {@code Proto.Package.PackageType}
   */
  public enum PackageType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     *请求
     * </pre>
     *
     * <code>Request = 1;</code>
     */
    Request(1),
    /**
     * <pre>
     *响应
     * </pre>
     *
     * <code>Reply = 2;</code>
     */
    Reply(2),
    /**
     * <pre>
     *异步请求
     * </pre>
     *
     * <code>AsnycRequest = 3;</code>
     */
    AsnycRequest(3),
    /**
     * <pre>
     *异步相应
     * </pre>
     *
     * <code>AsnycReply = 4;</code>
     */
    AsnycReply(4),
    /**
     * <pre>
     *推送消息
     * </pre>
     *
     * <code>PushMessage = 5;</code>
     */
    PushMessage(5),
    ;

    /**
     * <pre>
     *请求
     * </pre>
     *
     * <code>Request = 1;</code>
     */
    public static final int Request_VALUE = 1;
    /**
     * <pre>
     *响应
     * </pre>
     *
     * <code>Reply = 2;</code>
     */
    public static final int Reply_VALUE = 2;
    /**
     * <pre>
     *异步请求
     * </pre>
     *
     * <code>AsnycRequest = 3;</code>
     */
    public static final int AsnycRequest_VALUE = 3;
    /**
     * <pre>
     *异步相应
     * </pre>
     *
     * <code>AsnycReply = 4;</code>
     */
    public static final int AsnycReply_VALUE = 4;
    /**
     * <pre>
     *推送消息
     * </pre>
     *
     * <code>PushMessage = 5;</code>
     */
    public static final int PushMessage_VALUE = 5;


    public final int getNumber() {
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static PackageType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static PackageType forNumber(int value) {
      switch (value) {
        case 1: return Request;
        case 2: return Reply;
        case 3: return AsnycRequest;
        case 4: return AsnycReply;
        case 5: return PushMessage;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<PackageType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        PackageType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<PackageType>() {
            public PackageType findValueByNumber(int number) {
              return PackageType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.cc.protobuf.PackageHeadEnums.getDescriptor().getEnumTypes().get(0);
    }

    private static final PackageType[] VALUES = values();

    public static PackageType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private PackageType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:Proto.Package.PackageType)
  }

  /**
   * Protobuf enum {@code Proto.Package.FunctionCode}
   */
  public enum FunctionCode
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     *下单
     * </pre>
     *
     * <code>PlaceOrder = 1;</code>
     */
    PlaceOrder(1),
    /**
     * <pre>
     *撤单
     * </pre>
     *
     * <code>DeleteOrder = 2;</code>
     */
    DeleteOrder(2),
    /**
     * <pre>
     *衍生品定价
     * </pre>
     *
     * <code>DevPricing = 10;</code>
     */
    DevPricing(10),
    /**
     * <pre>
     *向app请求项目信息
     * </pre>
     *
     * <code>QueryProjectInfo = 101;</code>
     */
    QueryProjectInfo(101),
    /**
     * <pre>
     *请求现货证券信息
     * </pre>
     *
     * <code>QueryStockInfo = 102;</code>
     */
    QueryStockInfo(102),
    /**
     * <pre>
     *请求期货信息
     * </pre>
     *
     * <code>QueryFutureInfo = 103;</code>
     */
    QueryFutureInfo(103),
    /**
     * <code>QueryStockOrderInfo = 104;</code>
     */
    QueryStockOrderInfo(104),
    /**
     * <code>QueryStockKnockInfo = 105;</code>
     */
    QueryStockKnockInfo(105),
    /**
     * <code>QueryStockCancelInfo = 106;</code>
     */
    QueryStockCancelInfo(106),
    /**
     * <code>QueryStockPositionInfo = 107;</code>
     */
    QueryStockPositionInfo(107),
    /**
     * <code>QueryStockAccountInfo = 108;</code>
     */
    QueryStockAccountInfo(108),
    /**
     * <code>QueryFutOrderInfo = 109;</code>
     */
    QueryFutOrderInfo(109),
    /**
     * <code>QueryFutKnockInfo = 110;</code>
     */
    QueryFutKnockInfo(110),
    /**
     * <code>QueryFutCancelInfo = 111;</code>
     */
    QueryFutCancelInfo(111),
    /**
     * <code>QueryFutPositionInfo = 112;</code>
     */
    QueryFutPositionInfo(112),
    /**
     * <code>QueryFutAccountInfo = 113;</code>
     */
    QueryFutAccountInfo(113),
    /**
     * <pre>
     *向app请求分钟线行情信息
     * </pre>
     *
     * <code>QueryMiniteLineInfo = 114;</code>
     */
    QueryMiniteLineInfo(114),
    /**
     * <pre>
     *向app请求日线行情信息
     * </pre>
     *
     * <code>QueryDayLineInfo = 115;</code>
     */
    QueryDayLineInfo(115),
    /**
     * <pre>
     *向交易网关请求期货保证金率
     * </pre>
     *
     * <code>QueryFutureMarginRateAndCommission = 116;</code>
     */
    QueryFutureMarginRateAndCommission(116),
    /**
     * <pre>
     *请求Qts产品净值 
     * </pre>
     *
     * <code>QueryQtsProductNav = 117;</code>
     */
    QueryQtsProductNav(117),
    /**
     * <pre>
     *向app请求指数成分股及权重等信息
     * </pre>
     *
     * <code>QueryIndexComponentInfo = 118;</code>
     */
    QueryIndexComponentInfo(118),
    /**
     * <pre>
     *现货预清算
     * </pre>
     *
     * <code>StockPreSettle = 119;</code>
     */
    StockPreSettle(119),
    /**
     * <pre>
     *现货预清算结果查询
     * </pre>
     *
     * <code>QueryStockPreSettleResult = 120;</code>
     */
    QueryStockPreSettleResult(120),
    /**
     * <pre>
     *券商对账文件导入之现货交易流水导入
     * </pre>
     *
     * <code>StockReckonTradingLogImp = 121;</code>
     */
    StockReckonTradingLogImp(121),
    /**
     * <pre>
     *券商对账文件导入之资金导入
     * </pre>
     *
     * <code>StockReckonAccountImp = 122;</code>
     */
    StockReckonAccountImp(122),
    /**
     * <pre>
     *券商对账文件导入之股份导入
     * </pre>
     *
     * <code>StockReckonStklistImp = 123;</code>
     */
    StockReckonStklistImp(123),
    /**
     * <pre>
     *券商现货对账与对账结果结果返回
     * </pre>
     *
     * <code>StockReckonAndResultReturn = 124;</code>
     */
    StockReckonAndResultReturn(124),
    /**
     * <pre>
     *计算产品净值 
     * </pre>
     *
     * <code>ComputeProductNav = 125;</code>
     */
    ComputeProductNav(125),
    /**
     * <pre>
     *查询tick行情
     * </pre>
     *
     * <code>QueryQuotationTicks = 126;</code>
     */
    QueryQuotationTicks(126),
    /**
     * <pre>
     *测试功能号127， 高性能测试用，127为序列化后1字节的最大值
     * </pre>
     *
     * <code>TestFunc127 = 127;</code>
     */
    TestFunc127(127),
    /**
     * <pre>
     *从APP获取系统信息，每天不重复
     * </pre>
     *
     * <code>GetSysInfo = 128;</code>
     */
    GetSysInfo(128),
    /**
     * <pre>
     *查询需要的证券信息
     * </pre>
     *
     * <code>QueryNeedStkInfo = 129;</code>
     */
    QueryNeedStkInfo(129),
    /**
     * <pre>
     *查询白名单
     * </pre>
     *
     * <code>QueryWhiteList = 130;</code>
     */
    QueryWhiteList(130),
    /**
     * <pre>
     *查询黑名单
     * </pre>
     *
     * <code>QueryBlackList = 131;</code>
     */
    QueryBlackList(131),
    /**
     * <pre>
     *刷新app持仓内存
     * </pre>
     *
     * <code>RefreshPrjPosition = 132;</code>
     */
    RefreshPrjPosition(132),
    /**
     * <pre>
     *OMS柜员登录
     * </pre>
     *
     * <code>OMSOptLogin = 133;</code>
     */
    OMSOptLogin(133),
    /**
     * <pre>
     *请求现货证券信息
     * </pre>
     *
     * <code>QueryLOFInfo = 134;</code>
     */
    QueryLOFInfo(134),
    /**
     * <pre>
     *请求现货待交收信息
     * </pre>
     *
     * <code>QueryUnProcess = 135;</code>
     */
    QueryUnProcess(135),
    /**
     * <pre>
     *请求现货待交收信息
     * </pre>
     *
     * <code>RestrictListMaintance = 136;</code>
     */
    RestrictListMaintance(136),
    /**
     * <pre>
     *请求交易信息，委托成交等等      
     * </pre>
     *
     * <code>RequestTradeInfo = 137;</code>
     */
    RequestTradeInfo(137),
    /**
     * <pre>
     *向app请求日线行情信息   
     * </pre>
     *
     * <code>QueryDayLineInfoFromCiccDC = 138;</code>
     */
    QueryDayLineInfoFromCiccDC(138),
    /**
     * <code>QueryOptionInfo = 139;</code>
     */
    QueryOptionInfo(139),
    /**
     * <pre>
     *查询期货ETF套利的参数
     * </pre>
     *
     * <code>QueryFutureETFArbPara = 200;</code>
     */
    QueryFutureETFArbPara(200),
    /**
     * <pre>
     *暂停交易指令
     * </pre>
     *
     * <code>PauseTrade = 500;</code>
     */
    PauseTrade(500),
    /**
     * <pre>
     *重启交易指令	
     * </pre>
     *
     * <code>ContinueTrade = 501;</code>
     */
    ContinueTrade(501),
    /**
     * <pre>
     *修改模拟成交的参数
     * </pre>
     *
     * <code>SimuPara = 9000;</code>
     */
    SimuPara(9000),
    /**
     * <pre>
     *16351~16383保留作为测试功能号（16383为序列化后2字节的最大值）
     * </pre>
     *
     * <code>TestFunc16351 = 16351;</code>
     */
    TestFunc16351(16351),
    /**
     * <pre>
     *测试用16352
     * </pre>
     *
     * <code>TestFunc16352 = 16352;</code>
     */
    TestFunc16352(16352),
    /**
     * <pre>
     *测试用16353
     * </pre>
     *
     * <code>TestFunc16353 = 16353;</code>
     */
    TestFunc16353(16353),
    /**
     * <pre>
     *测试用16354
     * </pre>
     *
     * <code>TestFunc16354 = 16354;</code>
     */
    TestFunc16354(16354),
    /**
     * <pre>
     *测试用16355
     * </pre>
     *
     * <code>TestFunc16355 = 16355;</code>
     */
    TestFunc16355(16355),
    /**
     * <pre>
     *测试用16356
     * </pre>
     *
     * <code>TestFunc16356 = 16356;</code>
     */
    TestFunc16356(16356),
    /**
     * <pre>
     *测试用16357
     * </pre>
     *
     * <code>TestFunc16357 = 16357;</code>
     */
    TestFunc16357(16357),
    /**
     * <pre>
     *测试用16358
     * </pre>
     *
     * <code>TestFunc16358 = 16358;</code>
     */
    TestFunc16358(16358),
    /**
     * <pre>
     *测试用16359
     * </pre>
     *
     * <code>TestFunc16359 = 16359;</code>
     */
    TestFunc16359(16359),
    /**
     * <pre>
     *测试用16360
     * </pre>
     *
     * <code>TestFunc16360 = 16360;</code>
     */
    TestFunc16360(16360),
    /**
     * <pre>
     *测试用16361
     * </pre>
     *
     * <code>TestFunc16361 = 16361;</code>
     */
    TestFunc16361(16361),
    /**
     * <pre>
     *测试用16362
     * </pre>
     *
     * <code>TestFunc16362 = 16362;</code>
     */
    TestFunc16362(16362),
    /**
     * <pre>
     *测试用16363
     * </pre>
     *
     * <code>TestFunc16363 = 16363;</code>
     */
    TestFunc16363(16363),
    /**
     * <pre>
     *测试用16364
     * </pre>
     *
     * <code>TestFunc16364 = 16364;</code>
     */
    TestFunc16364(16364),
    /**
     * <pre>
     *测试用16365
     * </pre>
     *
     * <code>TestFunc16365 = 16365;</code>
     */
    TestFunc16365(16365),
    /**
     * <pre>
     *测试用16366
     * </pre>
     *
     * <code>TestFunc16366 = 16366;</code>
     */
    TestFunc16366(16366),
    /**
     * <pre>
     *测试用16367
     * </pre>
     *
     * <code>TestFunc16367 = 16367;</code>
     */
    TestFunc16367(16367),
    /**
     * <pre>
     *测试用16368
     * </pre>
     *
     * <code>TestFunc16368 = 16368;</code>
     */
    TestFunc16368(16368),
    /**
     * <pre>
     *测试用16369
     * </pre>
     *
     * <code>TestFunc16369 = 16369;</code>
     */
    TestFunc16369(16369),
    /**
     * <pre>
     *测试用16370
     * </pre>
     *
     * <code>TestFunc16370 = 16370;</code>
     */
    TestFunc16370(16370),
    ;

    /**
     * <pre>
     *下单
     * </pre>
     *
     * <code>PlaceOrder = 1;</code>
     */
    public static final int PlaceOrder_VALUE = 1;
    /**
     * <pre>
     *撤单
     * </pre>
     *
     * <code>DeleteOrder = 2;</code>
     */
    public static final int DeleteOrder_VALUE = 2;
    /**
     * <pre>
     *衍生品定价
     * </pre>
     *
     * <code>DevPricing = 10;</code>
     */
    public static final int DevPricing_VALUE = 10;
    /**
     * <pre>
     *向app请求项目信息
     * </pre>
     *
     * <code>QueryProjectInfo = 101;</code>
     */
    public static final int QueryProjectInfo_VALUE = 101;
    /**
     * <pre>
     *请求现货证券信息
     * </pre>
     *
     * <code>QueryStockInfo = 102;</code>
     */
    public static final int QueryStockInfo_VALUE = 102;
    /**
     * <pre>
     *请求期货信息
     * </pre>
     *
     * <code>QueryFutureInfo = 103;</code>
     */
    public static final int QueryFutureInfo_VALUE = 103;
    /**
     * <code>QueryStockOrderInfo = 104;</code>
     */
    public static final int QueryStockOrderInfo_VALUE = 104;
    /**
     * <code>QueryStockKnockInfo = 105;</code>
     */
    public static final int QueryStockKnockInfo_VALUE = 105;
    /**
     * <code>QueryStockCancelInfo = 106;</code>
     */
    public static final int QueryStockCancelInfo_VALUE = 106;
    /**
     * <code>QueryStockPositionInfo = 107;</code>
     */
    public static final int QueryStockPositionInfo_VALUE = 107;
    /**
     * <code>QueryStockAccountInfo = 108;</code>
     */
    public static final int QueryStockAccountInfo_VALUE = 108;
    /**
     * <code>QueryFutOrderInfo = 109;</code>
     */
    public static final int QueryFutOrderInfo_VALUE = 109;
    /**
     * <code>QueryFutKnockInfo = 110;</code>
     */
    public static final int QueryFutKnockInfo_VALUE = 110;
    /**
     * <code>QueryFutCancelInfo = 111;</code>
     */
    public static final int QueryFutCancelInfo_VALUE = 111;
    /**
     * <code>QueryFutPositionInfo = 112;</code>
     */
    public static final int QueryFutPositionInfo_VALUE = 112;
    /**
     * <code>QueryFutAccountInfo = 113;</code>
     */
    public static final int QueryFutAccountInfo_VALUE = 113;
    /**
     * <pre>
     *向app请求分钟线行情信息
     * </pre>
     *
     * <code>QueryMiniteLineInfo = 114;</code>
     */
    public static final int QueryMiniteLineInfo_VALUE = 114;
    /**
     * <pre>
     *向app请求日线行情信息
     * </pre>
     *
     * <code>QueryDayLineInfo = 115;</code>
     */
    public static final int QueryDayLineInfo_VALUE = 115;
    /**
     * <pre>
     *向交易网关请求期货保证金率
     * </pre>
     *
     * <code>QueryFutureMarginRateAndCommission = 116;</code>
     */
    public static final int QueryFutureMarginRateAndCommission_VALUE = 116;
    /**
     * <pre>
     *请求Qts产品净值 
     * </pre>
     *
     * <code>QueryQtsProductNav = 117;</code>
     */
    public static final int QueryQtsProductNav_VALUE = 117;
    /**
     * <pre>
     *向app请求指数成分股及权重等信息
     * </pre>
     *
     * <code>QueryIndexComponentInfo = 118;</code>
     */
    public static final int QueryIndexComponentInfo_VALUE = 118;
    /**
     * <pre>
     *现货预清算
     * </pre>
     *
     * <code>StockPreSettle = 119;</code>
     */
    public static final int StockPreSettle_VALUE = 119;
    /**
     * <pre>
     *现货预清算结果查询
     * </pre>
     *
     * <code>QueryStockPreSettleResult = 120;</code>
     */
    public static final int QueryStockPreSettleResult_VALUE = 120;
    /**
     * <pre>
     *券商对账文件导入之现货交易流水导入
     * </pre>
     *
     * <code>StockReckonTradingLogImp = 121;</code>
     */
    public static final int StockReckonTradingLogImp_VALUE = 121;
    /**
     * <pre>
     *券商对账文件导入之资金导入
     * </pre>
     *
     * <code>StockReckonAccountImp = 122;</code>
     */
    public static final int StockReckonAccountImp_VALUE = 122;
    /**
     * <pre>
     *券商对账文件导入之股份导入
     * </pre>
     *
     * <code>StockReckonStklistImp = 123;</code>
     */
    public static final int StockReckonStklistImp_VALUE = 123;
    /**
     * <pre>
     *券商现货对账与对账结果结果返回
     * </pre>
     *
     * <code>StockReckonAndResultReturn = 124;</code>
     */
    public static final int StockReckonAndResultReturn_VALUE = 124;
    /**
     * <pre>
     *计算产品净值 
     * </pre>
     *
     * <code>ComputeProductNav = 125;</code>
     */
    public static final int ComputeProductNav_VALUE = 125;
    /**
     * <pre>
     *查询tick行情
     * </pre>
     *
     * <code>QueryQuotationTicks = 126;</code>
     */
    public static final int QueryQuotationTicks_VALUE = 126;
    /**
     * <pre>
     *测试功能号127， 高性能测试用，127为序列化后1字节的最大值
     * </pre>
     *
     * <code>TestFunc127 = 127;</code>
     */
    public static final int TestFunc127_VALUE = 127;
    /**
     * <pre>
     *从APP获取系统信息，每天不重复
     * </pre>
     *
     * <code>GetSysInfo = 128;</code>
     */
    public static final int GetSysInfo_VALUE = 128;
    /**
     * <pre>
     *查询需要的证券信息
     * </pre>
     *
     * <code>QueryNeedStkInfo = 129;</code>
     */
    public static final int QueryNeedStkInfo_VALUE = 129;
    /**
     * <pre>
     *查询白名单
     * </pre>
     *
     * <code>QueryWhiteList = 130;</code>
     */
    public static final int QueryWhiteList_VALUE = 130;
    /**
     * <pre>
     *查询黑名单
     * </pre>
     *
     * <code>QueryBlackList = 131;</code>
     */
    public static final int QueryBlackList_VALUE = 131;
    /**
     * <pre>
     *刷新app持仓内存
     * </pre>
     *
     * <code>RefreshPrjPosition = 132;</code>
     */
    public static final int RefreshPrjPosition_VALUE = 132;
    /**
     * <pre>
     *OMS柜员登录
     * </pre>
     *
     * <code>OMSOptLogin = 133;</code>
     */
    public static final int OMSOptLogin_VALUE = 133;
    /**
     * <pre>
     *请求现货证券信息
     * </pre>
     *
     * <code>QueryLOFInfo = 134;</code>
     */
    public static final int QueryLOFInfo_VALUE = 134;
    /**
     * <pre>
     *请求现货待交收信息
     * </pre>
     *
     * <code>QueryUnProcess = 135;</code>
     */
    public static final int QueryUnProcess_VALUE = 135;
    /**
     * <pre>
     *请求现货待交收信息
     * </pre>
     *
     * <code>RestrictListMaintance = 136;</code>
     */
    public static final int RestrictListMaintance_VALUE = 136;
    /**
     * <pre>
     *请求交易信息，委托成交等等      
     * </pre>
     *
     * <code>RequestTradeInfo = 137;</code>
     */
    public static final int RequestTradeInfo_VALUE = 137;
    /**
     * <pre>
     *向app请求日线行情信息   
     * </pre>
     *
     * <code>QueryDayLineInfoFromCiccDC = 138;</code>
     */
    public static final int QueryDayLineInfoFromCiccDC_VALUE = 138;
    /**
     * <code>QueryOptionInfo = 139;</code>
     */
    public static final int QueryOptionInfo_VALUE = 139;
    /**
     * <pre>
     *查询期货ETF套利的参数
     * </pre>
     *
     * <code>QueryFutureETFArbPara = 200;</code>
     */
    public static final int QueryFutureETFArbPara_VALUE = 200;
    /**
     * <pre>
     *暂停交易指令
     * </pre>
     *
     * <code>PauseTrade = 500;</code>
     */
    public static final int PauseTrade_VALUE = 500;
    /**
     * <pre>
     *重启交易指令	
     * </pre>
     *
     * <code>ContinueTrade = 501;</code>
     */
    public static final int ContinueTrade_VALUE = 501;
    /**
     * <pre>
     *修改模拟成交的参数
     * </pre>
     *
     * <code>SimuPara = 9000;</code>
     */
    public static final int SimuPara_VALUE = 9000;
    /**
     * <pre>
     *16351~16383保留作为测试功能号（16383为序列化后2字节的最大值）
     * </pre>
     *
     * <code>TestFunc16351 = 16351;</code>
     */
    public static final int TestFunc16351_VALUE = 16351;
    /**
     * <pre>
     *测试用16352
     * </pre>
     *
     * <code>TestFunc16352 = 16352;</code>
     */
    public static final int TestFunc16352_VALUE = 16352;
    /**
     * <pre>
     *测试用16353
     * </pre>
     *
     * <code>TestFunc16353 = 16353;</code>
     */
    public static final int TestFunc16353_VALUE = 16353;
    /**
     * <pre>
     *测试用16354
     * </pre>
     *
     * <code>TestFunc16354 = 16354;</code>
     */
    public static final int TestFunc16354_VALUE = 16354;
    /**
     * <pre>
     *测试用16355
     * </pre>
     *
     * <code>TestFunc16355 = 16355;</code>
     */
    public static final int TestFunc16355_VALUE = 16355;
    /**
     * <pre>
     *测试用16356
     * </pre>
     *
     * <code>TestFunc16356 = 16356;</code>
     */
    public static final int TestFunc16356_VALUE = 16356;
    /**
     * <pre>
     *测试用16357
     * </pre>
     *
     * <code>TestFunc16357 = 16357;</code>
     */
    public static final int TestFunc16357_VALUE = 16357;
    /**
     * <pre>
     *测试用16358
     * </pre>
     *
     * <code>TestFunc16358 = 16358;</code>
     */
    public static final int TestFunc16358_VALUE = 16358;
    /**
     * <pre>
     *测试用16359
     * </pre>
     *
     * <code>TestFunc16359 = 16359;</code>
     */
    public static final int TestFunc16359_VALUE = 16359;
    /**
     * <pre>
     *测试用16360
     * </pre>
     *
     * <code>TestFunc16360 = 16360;</code>
     */
    public static final int TestFunc16360_VALUE = 16360;
    /**
     * <pre>
     *测试用16361
     * </pre>
     *
     * <code>TestFunc16361 = 16361;</code>
     */
    public static final int TestFunc16361_VALUE = 16361;
    /**
     * <pre>
     *测试用16362
     * </pre>
     *
     * <code>TestFunc16362 = 16362;</code>
     */
    public static final int TestFunc16362_VALUE = 16362;
    /**
     * <pre>
     *测试用16363
     * </pre>
     *
     * <code>TestFunc16363 = 16363;</code>
     */
    public static final int TestFunc16363_VALUE = 16363;
    /**
     * <pre>
     *测试用16364
     * </pre>
     *
     * <code>TestFunc16364 = 16364;</code>
     */
    public static final int TestFunc16364_VALUE = 16364;
    /**
     * <pre>
     *测试用16365
     * </pre>
     *
     * <code>TestFunc16365 = 16365;</code>
     */
    public static final int TestFunc16365_VALUE = 16365;
    /**
     * <pre>
     *测试用16366
     * </pre>
     *
     * <code>TestFunc16366 = 16366;</code>
     */
    public static final int TestFunc16366_VALUE = 16366;
    /**
     * <pre>
     *测试用16367
     * </pre>
     *
     * <code>TestFunc16367 = 16367;</code>
     */
    public static final int TestFunc16367_VALUE = 16367;
    /**
     * <pre>
     *测试用16368
     * </pre>
     *
     * <code>TestFunc16368 = 16368;</code>
     */
    public static final int TestFunc16368_VALUE = 16368;
    /**
     * <pre>
     *测试用16369
     * </pre>
     *
     * <code>TestFunc16369 = 16369;</code>
     */
    public static final int TestFunc16369_VALUE = 16369;
    /**
     * <pre>
     *测试用16370
     * </pre>
     *
     * <code>TestFunc16370 = 16370;</code>
     */
    public static final int TestFunc16370_VALUE = 16370;


    public final int getNumber() {
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static FunctionCode valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static FunctionCode forNumber(int value) {
      switch (value) {
        case 1: return PlaceOrder;
        case 2: return DeleteOrder;
        case 10: return DevPricing;
        case 101: return QueryProjectInfo;
        case 102: return QueryStockInfo;
        case 103: return QueryFutureInfo;
        case 104: return QueryStockOrderInfo;
        case 105: return QueryStockKnockInfo;
        case 106: return QueryStockCancelInfo;
        case 107: return QueryStockPositionInfo;
        case 108: return QueryStockAccountInfo;
        case 109: return QueryFutOrderInfo;
        case 110: return QueryFutKnockInfo;
        case 111: return QueryFutCancelInfo;
        case 112: return QueryFutPositionInfo;
        case 113: return QueryFutAccountInfo;
        case 114: return QueryMiniteLineInfo;
        case 115: return QueryDayLineInfo;
        case 116: return QueryFutureMarginRateAndCommission;
        case 117: return QueryQtsProductNav;
        case 118: return QueryIndexComponentInfo;
        case 119: return StockPreSettle;
        case 120: return QueryStockPreSettleResult;
        case 121: return StockReckonTradingLogImp;
        case 122: return StockReckonAccountImp;
        case 123: return StockReckonStklistImp;
        case 124: return StockReckonAndResultReturn;
        case 125: return ComputeProductNav;
        case 126: return QueryQuotationTicks;
        case 127: return TestFunc127;
        case 128: return GetSysInfo;
        case 129: return QueryNeedStkInfo;
        case 130: return QueryWhiteList;
        case 131: return QueryBlackList;
        case 132: return RefreshPrjPosition;
        case 133: return OMSOptLogin;
        case 134: return QueryLOFInfo;
        case 135: return QueryUnProcess;
        case 136: return RestrictListMaintance;
        case 137: return RequestTradeInfo;
        case 138: return QueryDayLineInfoFromCiccDC;
        case 139: return QueryOptionInfo;
        case 200: return QueryFutureETFArbPara;
        case 500: return PauseTrade;
        case 501: return ContinueTrade;
        case 9000: return SimuPara;
        case 16351: return TestFunc16351;
        case 16352: return TestFunc16352;
        case 16353: return TestFunc16353;
        case 16354: return TestFunc16354;
        case 16355: return TestFunc16355;
        case 16356: return TestFunc16356;
        case 16357: return TestFunc16357;
        case 16358: return TestFunc16358;
        case 16359: return TestFunc16359;
        case 16360: return TestFunc16360;
        case 16361: return TestFunc16361;
        case 16362: return TestFunc16362;
        case 16363: return TestFunc16363;
        case 16364: return TestFunc16364;
        case 16365: return TestFunc16365;
        case 16366: return TestFunc16366;
        case 16367: return TestFunc16367;
        case 16368: return TestFunc16368;
        case 16369: return TestFunc16369;
        case 16370: return TestFunc16370;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<FunctionCode>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        FunctionCode> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<FunctionCode>() {
            public FunctionCode findValueByNumber(int number) {
              return FunctionCode.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.cc.protobuf.PackageHeadEnums.getDescriptor().getEnumTypes().get(1);
    }

    private static final FunctionCode[] VALUES = values();

    public static FunctionCode valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private FunctionCode(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:Proto.Package.FunctionCode)
  }


  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\025PackageHeadEnum.proto\022\rProto.Package*X" +
      "\n\013PackageType\022\013\n\007Request\020\001\022\t\n\005Reply\020\002\022\020\n" +
      "\014AsnycRequest\020\003\022\016\n\nAsnycReply\020\004\022\017\n\013PushM" +
      "essage\020\005*\335\013\n\014FunctionCode\022\016\n\nPlaceOrder\020" +
      "\001\022\017\n\013DeleteOrder\020\002\022\016\n\nDevPricing\020\n\022\024\n\020Qu" +
      "eryProjectInfo\020e\022\022\n\016QueryStockInfo\020f\022\023\n\017" +
      "QueryFutureInfo\020g\022\027\n\023QueryStockOrderInfo" +
      "\020h\022\027\n\023QueryStockKnockInfo\020i\022\030\n\024QueryStoc" +
      "kCancelInfo\020j\022\032\n\026QueryStockPositionInfo\020" +
      "k\022\031\n\025QueryStockAccountInfo\020l\022\025\n\021QueryFut" +
      "OrderInfo\020m\022\025\n\021QueryFutKnockInfo\020n\022\026\n\022Qu" +
      "eryFutCancelInfo\020o\022\030\n\024QueryFutPositionIn" +
      "fo\020p\022\027\n\023QueryFutAccountInfo\020q\022\027\n\023QueryMi" +
      "niteLineInfo\020r\022\024\n\020QueryDayLineInfo\020s\022&\n\"" +
      "QueryFutureMarginRateAndCommission\020t\022\026\n\022" +
      "QueryQtsProductNav\020u\022\033\n\027QueryIndexCompon" +
      "entInfo\020v\022\022\n\016StockPreSettle\020w\022\035\n\031QuerySt" +
      "ockPreSettleResult\020x\022\034\n\030StockReckonTradi" +
      "ngLogImp\020y\022\031\n\025StockReckonAccountImp\020z\022\031\n" +
      "\025StockReckonStklistImp\020{\022\036\n\032StockReckonA" +
      "ndResultReturn\020|\022\025\n\021ComputeProductNav\020}\022" +
      "\027\n\023QueryQuotationTicks\020~\022\017\n\013TestFunc127\020" +
      "\177\022\017\n\nGetSysInfo\020\200\001\022\025\n\020QueryNeedStkInfo\020\201" +
      "\001\022\023\n\016QueryWhiteList\020\202\001\022\023\n\016QueryBlackList" +
      "\020\203\001\022\027\n\022RefreshPrjPosition\020\204\001\022\020\n\013OMSOptLo" +
      "gin\020\205\001\022\021\n\014QueryLOFInfo\020\206\001\022\023\n\016QueryUnProc" +
      "ess\020\207\001\022\032\n\025RestrictListMaintance\020\210\001\022\025\n\020Re" +
      "questTradeInfo\020\211\001\022\037\n\032QueryDayLineInfoFro" +
      "mCiccDC\020\212\001\022\024\n\017QueryOptionInfo\020\213\001\022\032\n\025Quer" +
      "yFutureETFArbPara\020\310\001\022\017\n\nPauseTrade\020\364\003\022\022\n" +
      "\rContinueTrade\020\365\003\022\r\n\010SimuPara\020\250F\022\022\n\rTest" +
      "Func16351\020\337\177\022\022\n\rTestFunc16352\020\340\177\022\022\n\rTest" +
      "Func16353\020\341\177\022\022\n\rTestFunc16354\020\342\177\022\022\n\rTest" +
      "Func16355\020\343\177\022\022\n\rTestFunc16356\020\344\177\022\022\n\rTest" +
      "Func16357\020\345\177\022\022\n\rTestFunc16358\020\346\177\022\022\n\rTest" +
      "Func16359\020\347\177\022\022\n\rTestFunc16360\020\350\177\022\022\n\rTest" +
      "Func16361\020\351\177\022\022\n\rTestFunc16362\020\352\177\022\022\n\rTest" +
      "Func16363\020\353\177\022\022\n\rTestFunc16364\020\354\177\022\022\n\rTest" +
      "Func16365\020\355\177\022\022\n\rTestFunc16366\020\356\177\022\022\n\rTest" +
      "Func16367\020\357\177\022\022\n\rTestFunc16368\020\360\177\022\022\n\rTest" +
      "Func16369\020\361\177\022\022\n\rTestFunc16370\020\362\177B#\n\017com." +
      "cc.protobufB\020PackageHeadEnums"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
